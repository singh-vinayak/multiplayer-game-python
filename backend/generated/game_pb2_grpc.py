# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import game_pb2 as game__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in game_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GameServiceStub(object):
    """Service Definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.JoinGame = channel.unary_unary(
                '/game.GameService/JoinGame',
                request_serializer=game__pb2.JoinRequest.SerializeToString,
                response_deserializer=game__pb2.JoinResponse.FromString,
                _registered_method=True)
        self.GetNextQuestion = channel.unary_unary(
                '/game.GameService/GetNextQuestion',
                request_serializer=game__pb2.GameRequest.SerializeToString,
                response_deserializer=game__pb2.QuestionCard.FromString,
                _registered_method=True)
        self.SubmitAnswer = channel.unary_unary(
                '/game.GameService/SubmitAnswer',
                request_serializer=game__pb2.AnswerRequest.SerializeToString,
                response_deserializer=game__pb2.AnswerResult.FromString,
                _registered_method=True)
        self.GetLeaderboard = channel.unary_unary(
                '/game.GameService/GetLeaderboard',
                request_serializer=game__pb2.GameId.SerializeToString,
                response_deserializer=game__pb2.Leaderboard.FromString,
                _registered_method=True)
        self.StreamLeaderboard = channel.unary_stream(
                '/game.GameService/StreamLeaderboard',
                request_serializer=game__pb2.GameId.SerializeToString,
                response_deserializer=game__pb2.LeaderboardUpdate.FromString,
                _registered_method=True)


class GameServiceServicer(object):
    """Service Definition
    """

    def JoinGame(self, request, context):
        """Join a game lobby
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNextQuestion(self, request, context):
        """Start the game and get the next question
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitAnswer(self, request, context):
        """Submit an answer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLeaderboard(self, request, context):
        """Fetch leaderboard once
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamLeaderboard(self, request, context):
        """Stream leaderboard updates in real time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GameServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'JoinGame': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinGame,
                    request_deserializer=game__pb2.JoinRequest.FromString,
                    response_serializer=game__pb2.JoinResponse.SerializeToString,
            ),
            'GetNextQuestion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNextQuestion,
                    request_deserializer=game__pb2.GameRequest.FromString,
                    response_serializer=game__pb2.QuestionCard.SerializeToString,
            ),
            'SubmitAnswer': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitAnswer,
                    request_deserializer=game__pb2.AnswerRequest.FromString,
                    response_serializer=game__pb2.AnswerResult.SerializeToString,
            ),
            'GetLeaderboard': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLeaderboard,
                    request_deserializer=game__pb2.GameId.FromString,
                    response_serializer=game__pb2.Leaderboard.SerializeToString,
            ),
            'StreamLeaderboard': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamLeaderboard,
                    request_deserializer=game__pb2.GameId.FromString,
                    response_serializer=game__pb2.LeaderboardUpdate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'game.GameService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('game.GameService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GameService(object):
    """Service Definition
    """

    @staticmethod
    def JoinGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameService/JoinGame',
            game__pb2.JoinRequest.SerializeToString,
            game__pb2.JoinResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetNextQuestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameService/GetNextQuestion',
            game__pb2.GameRequest.SerializeToString,
            game__pb2.QuestionCard.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitAnswer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameService/SubmitAnswer',
            game__pb2.AnswerRequest.SerializeToString,
            game__pb2.AnswerResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLeaderboard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/game.GameService/GetLeaderboard',
            game__pb2.GameId.SerializeToString,
            game__pb2.Leaderboard.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamLeaderboard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/game.GameService/StreamLeaderboard',
            game__pb2.GameId.SerializeToString,
            game__pb2.LeaderboardUpdate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
